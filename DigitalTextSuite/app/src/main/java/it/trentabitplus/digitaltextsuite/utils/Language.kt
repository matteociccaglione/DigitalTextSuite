package it.trentabitplus.digitaltextsuite.utils
import androidx.lifecycle.MutableLiveData
import com.google.mlkit.nl.languageid.LanguageIdentification
import com.google.mlkit.nl.languageid.LanguageIdentificationOptions
import java.util.*

/**
 * This class represents a custom Language class
 * @param code : the 2 character code that identifies the language
 *
 * @author Andrea Pepe
 */
class Language(val code: String) : Comparable<Language> {

    companion object{
        /**
         * This method performs a mapping between the language and
         * a flag of a country that better represents the language
         *
         * @param code : the 2 characters code of the language
         *
         * @author Adrian Petru Baba
         */
        fun getFlag(code : String) : String {
            var flag=""
            when(code){
                "sq" -> flag="ðŸ‡¦ðŸ‡±"
                "ar" -> flag="ðŸ‡¸ðŸ‡¦"
                "ca" -> flag="ðŸ‡ªðŸ‡¸"
                "zh" -> flag=getCharacter('c')+ getCharacter('n')
                "cs" -> flag="ðŸ‡¨ðŸ‡¿"
                "da" -> flag="ðŸ‡©ðŸ‡°"
                "en" -> flag= "ðŸ‡¬ðŸ‡§"
                "ka" -> flag="ðŸ‡¬ðŸ‡ª"
                "el" -> flag="ðŸ‡¬ðŸ‡·"
                "he" -> flag="ðŸ‡®ðŸ‡±"
                "hi" -> flag="ðŸ‡®ðŸ‡³"
                "ja" -> flag="ðŸ‡¯ðŸ‡µ"
                "ko" -> flag="ðŸ‡°ðŸ‡·"
                "fa" -> flag="ðŸ‡®ðŸ‡·"
                "sw" -> flag="ðŸ‡¹ðŸ‡¿"
                "te" -> flag="ðŸ‡®ðŸ‡³"
                "uk" -> flag="ðŸ‡ºðŸ‡¦"
                "ur" -> flag="ðŸ‡µðŸ‡°"
                "vi" -> flag="ðŸ‡»ðŸ‡³"
                else -> flag= getCharacter(code[0])+ getCharacter(code[1])
            }

            return flag

        }

        /**
         * Identify the language of a String and put the result into the value of result param
         *
         * @param text The string to be analyzed
         * @param result The variable where the method must store the result. Put an observer on it
         */
        fun identifyLanguage(text: String,result: MutableLiveData<String>){
            val languageIdentifier = LanguageIdentification.getClient(
                LanguageIdentificationOptions
                .Builder()
                .setConfidenceThreshold(0.80f)
                .build())
            languageIdentifier.identifyLanguage(text).addOnSuccessListener { langCode ->
                result.value = langCode
            }
        }

        private fun getCharacter(character : Char) : String{
            var res =""
            when(character){
                'a' -> res="ðŸ‡¦"
                'b' -> res="ðŸ‡§"
                'c' -> res="ðŸ‡¨"
                'd' -> res="ðŸ‡©"
                'e' -> res="ðŸ‡ª"
                'f' -> res="ðŸ‡«"
                'g' -> res="ðŸ‡¬"
                'h' -> res="ðŸ‡­"
                'i' -> res="ðŸ‡®"
                'j' -> res="ðŸ‡¯"
                'k' -> res="ðŸ‡°"
                'l' -> res="ðŸ‡±"
                'm' -> res="ðŸ‡²"
                'n' -> res="ðŸ‡³"
                'o' -> res="ðŸ‡´"
                'p' -> res="ðŸ‡µ"
                'q' -> res="ðŸ‡¶"
                'r' -> res="ðŸ‡·"
                's' -> res="ðŸ‡¸"
                't' -> res="ðŸ‡¹"
                'u' -> res="ðŸ‡º"
                'v' -> res="ðŸ‡»"
                'w' -> res="ðŸ‡¼"
                'x' -> res="ðŸ‡½"
                'y' -> res="ðŸ‡¾"
                'z' -> res="ðŸ‡¿"
            }
            return res
        }
    }



    val displayName : String
        get() = Locale(code).displayName

    override fun equals(other: Any?): Boolean {
        if (other === this){
            return true
        }

        if(other !is Language){
            return false
        }

        val otherLang = other as Language?
        return otherLang!!.code == code
    }

    override fun toString(): String {
        return displayName
    }

    override fun compareTo(other: Language): Int {
        return this.displayName.compareTo(other.displayName)
    }

    override fun hashCode(): Int {
        return code.hashCode()
    }

    fun getFlag() : String{
        return getFlag(this.code)
    }
}